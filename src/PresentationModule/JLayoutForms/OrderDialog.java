/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PresentationModule.JLayoutForms;

import ApplicationHelper.Helper;
import BusinessModule.CurrentOrder;
import BusinessModule.PurchaseOrder;
import BusinessModule.StaffStockOrder;
import BusinessModule.StationaryStock;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Neil
 */
public class OrderDialog extends javax.swing.JDialog {

    private double grandTotal = 0.0;
    private boolean ordered = false;
    private boolean isLoadedOrder = false;
    private List<StationaryStock> stationary = new ArrayList<>();
    private List<PurchaseOrder> purchaseOrders = new ArrayList<>();

    public boolean isOrdered()
    {
        return ordered;
    }

    public void setOrdered(boolean ordered)
    {
        this.ordered = ordered;
    }
    

    /**
     * Creates new form OrderDialog
     */
    public OrderDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        LoadDialogData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlOrderItems = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrderItems = new javax.swing.JTable();
        btnBackFromOrder = new javax.swing.JButton();
        btnApproveOrder = new javax.swing.JButton();
        btnRemoveSelectedItem = new javax.swing.JButton();
        btnCancelOrder = new javax.swing.JButton();
        pnlOrderDetails = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblOrderID = new javax.swing.JLabel();
        lblStaffStockOrderID = new javax.swing.JLabel();
        lblDateCreated = new javax.swing.JLabel();
        lblCreatedUser = new javax.swing.JLabel();
        lblDateCompleted = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblGrandTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Current Order Dialog");

        pnlOrderItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Order Items"));

        tblOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrderItems.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tblOrderItems);

        javax.swing.GroupLayout pnlOrderItemsLayout = new javax.swing.GroupLayout(pnlOrderItems);
        pnlOrderItems.setLayout(pnlOrderItemsLayout);
        pnlOrderItemsLayout.setHorizontalGroup(
            pnlOrderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );
        pnlOrderItemsLayout.setVerticalGroup(
            pnlOrderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        btnBackFromOrder.setText("Back");
        btnBackFromOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackFromOrderMouseClicked(evt);
            }
        });

        btnApproveOrder.setText("Request Order");
        btnApproveOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnApproveOrderMouseClicked(evt);
            }
        });

        btnRemoveSelectedItem.setText("Remove Item");
        btnRemoveSelectedItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveSelectedItemMouseClicked(evt);
            }
        });

        btnCancelOrder.setText("Cancel Order");
        btnCancelOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelOrderMouseClicked(evt);
            }
        });

        pnlOrderDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Order Details"));
        pnlOrderDetails.setToolTipText("");

        jLabel1.setText("Staff Stock Order ID:");

        jLabel2.setText("Order ID:");

        jLabel3.setText("Created:");

        jLabel4.setText("Completed:");

        jLabel5.setText("Created By User:");

        lblOrderID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblOrderID.setText("N/a");

        lblStaffStockOrderID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblStaffStockOrderID.setText("N/a");

        lblDateCreated.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblDateCreated.setText("N/a");

        lblCreatedUser.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblCreatedUser.setText("N/a");

        lblDateCompleted.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblDateCompleted.setText("N/a");

        javax.swing.GroupLayout pnlOrderDetailsLayout = new javax.swing.GroupLayout(pnlOrderDetails);
        pnlOrderDetails.setLayout(pnlOrderDetailsLayout);
        pnlOrderDetailsLayout.setHorizontalGroup(
            pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrderDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOrderDetailsLayout.createSequentialGroup()
                        .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(90, 90, 90)
                        .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCreatedUser)
                            .addComponent(lblDateCompleted)
                            .addComponent(lblDateCreated)))
                    .addGroup(pnlOrderDetailsLayout.createSequentialGroup()
                        .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(69, 69, 69)
                        .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrderID)
                            .addComponent(lblStaffStockOrderID))))
                .addContainerGap(386, Short.MAX_VALUE))
        );
        pnlOrderDetailsLayout.setVerticalGroup(
            pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrderDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblOrderID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblStaffStockOrderID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblDateCreated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblDateCompleted))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblCreatedUser))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setText("Grand Total:");

        lblGrandTotal.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblGrandTotal.setText("R");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlOrderItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlOrderDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBackFromOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveSelectedItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCancelOrder)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGrandTotal)
                            .addComponent(btnApproveOrder))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlOrderDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlOrderItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblGrandTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackFromOrder)
                    .addComponent(btnApproveOrder)
                    .addComponent(btnCancelOrder)
                    .addComponent(btnRemoveSelectedItem))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ClearDialog() {
        Authentication.ActiveAccess.CurrentOrderList.clear();
        DefaultTableModel model = (DefaultTableModel) tblOrderItems.getModel();
        model.setRowCount(0);
        grandTotal = 0.0;
        Authentication.ActiveAccess.CurrentOrder = null;
        dispose();
    }

    private void PopulateOrderItemsTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblOrderItems.getModel();

            for (StaffStockOrder orderStockData : Authentication.ActiveAccess.getCurrentOrderList()) {
                Object[] o = new Object[4];
                o[0] = new StationaryStock().GetProductFromID(orderStockData.getStationaryStockID());
                o[1] = orderStockData.getQuantity();
                o[2] = orderStockData.getPrice();
                o[3] = orderStockData.getQuantity() * orderStockData.getPrice();
                grandTotal += orderStockData.getQuantity() * orderStockData.getPrice();
                model.addRow(o);
            }

            tblOrderItems.setModel(model);

        } catch (ArrayIndexOutOfBoundsException aiob) {
            Helper.DisplayError(aiob.toString());
        } catch (Exception ex) {
            Helper.DisplayError(ex.getMessage());
        }
    }

    private void CheckStationaryQuantity() {
        stationary = new StationaryStock().LoadStationaryStock();

        for (StationaryStock stationaryStock : stationary) {
            for (StaffStockOrder checkQuantity : Authentication.ActiveAccess.CurrentOrderList) {
                if (stationaryStock.getStationaryStockID() == checkQuantity.getStationaryStockID()) {
                    stationaryStock.setQuantity(stationaryStock.getQuantity() - checkQuantity.getQuantity());
                    if (stationaryStock.getQuantity() < 0) {
                        purchaseOrders.add(new PurchaseOrder(stationaryStock.getStationaryCategoryID()));
                    }
                }
            }
        }
    }

    private void LoadDialogData() {
        try {
            if (Authentication.ActiveAccess.getCurrentOrder() == null) {
                Authentication.ActiveAccess.CurrentOrder = new CurrentOrder(SecurityModule.IDCreation.CreateStaffStockID(), Authentication.ActiveAccess.getCurrentOrderList(),
                        new java.sql.Date(new java.util.Date().getTime()), Authentication.AuthenticationSettings.getConnectedStaff().getStaffID(), grandTotal);

                lblOrderID.setText("N/a");
                lblStaffStockOrderID.setText(Authentication.ActiveAccess.CurrentOrder.getStaffStockID());
                lblDateCreated.setText(new java.sql.Date(new java.util.Date().getTime()).toString());
                lblDateCompleted.setText("N/a");
                lblCreatedUser.setText(Authentication.AuthenticationSettings.getConnectedStaff().getStaffUsername());
                lblGrandTotal.setText("0.0");
            } else {
                if (Authentication.ActiveAccess.CurrentOrder.getOrderID() != null) {
                    lblOrderID.setText(Authentication.ActiveAccess.CurrentOrder.getOrderID());
                } else {
                    lblOrderID.setText("N/a");
                }

                if (Authentication.ActiveAccess.CurrentOrder.getApprovalDate() != null) {
                    lblDateCompleted.setText(Authentication.ActiveAccess.CurrentOrder.getApprovalDate().toString());
                } else {
                    lblDateCompleted.setText("N/a");
                }

                if (String.valueOf(Authentication.ActiveAccess.CurrentOrder.getTotalPrice()) != null) {
                    lblGrandTotal.setText(String.valueOf(Authentication.ActiveAccess.CurrentOrder.getTotalPrice()));
                }

                if (Authentication.AuthenticationSettings.getConnectedStaff() != null) {
                    lblCreatedUser.setText(Authentication.AuthenticationSettings.getConnectedStaff().getStaffUsername());
                } else {
                    lblCreatedUser.setText(Authentication.ActiveAccess.CurrentOrder.getStaffUsername());
                }

                if (Authentication.ActiveAccess.CurrentOrder.getCurrentDate() != null) {
                    lblDateCreated.setText(Authentication.ActiveAccess.CurrentOrder.getCurrentDate().toString());
                } else {
                    lblDateCreated.setText(new java.sql.Date(new java.util.Date().getTime()).toString());
                }

                lblStaffStockOrderID.setText(Authentication.ActiveAccess.CurrentOrder.getStaffStockID());

            }

            if (Authentication.ActiveAccess.CurrentOrder.isViewOrder()) {
                btnApproveOrder.setText("Generate Order Report");
                btnCancelOrder.setVisible(false);
                btnRemoveSelectedItem.setVisible(false);
            } else if (Authentication.ActiveAccess.CurrentOrder.isViewStaffOrder()) {
                btnRemoveSelectedItem.setVisible(false);
                btnApproveOrder.setText("Approve Order");
                btnCancelOrder.setText("Deny Order");
            } else if (Authentication.ActiveAccess.CurrentOrder.isViewStaffPending()) {
                btnApproveOrder.setVisible(false);
                btnCancelOrder.setVisible(false);
                btnRemoveSelectedItem.setVisible(false);
            }

            PopulateOrderItemsTable();
            lblGrandTotal.setText(String.valueOf(grandTotal));
        } catch (NullPointerException npe) {
            Helper.DisplayError(npe.toString());
        } catch (Exception ex) {
            Helper.DisplayError(ex.toString());
        }
    }
    private void btnBackFromOrderMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnBackFromOrderMouseClicked
    {//GEN-HEADEREND:event_btnBackFromOrderMouseClicked
        dispose();
    }//GEN-LAST:event_btnBackFromOrderMouseClicked

    private void btnRemoveSelectedItemMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnRemoveSelectedItemMouseClicked
    {//GEN-HEADEREND:event_btnRemoveSelectedItemMouseClicked
        try {
            int rowSelection = tblOrderItems.getSelectedRow();
            Authentication.ActiveAccess.CurrentOrderList.remove(rowSelection);

            DefaultTableModel model = (DefaultTableModel) tblOrderItems.getModel();
            model.setRowCount(0);

            grandTotal = 0.0;
            LoadDialogData();
        } catch (ArrayIndexOutOfBoundsException aex) {
            Helper.DisplayError("No Rows Remaining", "Removal Error");
        }
    }//GEN-LAST:event_btnRemoveSelectedItemMouseClicked

    private void btnCancelOrderMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnCancelOrderMouseClicked
    {//GEN-HEADEREND:event_btnCancelOrderMouseClicked

        if (btnCancelOrder.getText().equals("Deny Order")) {
            int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want deny this current order? All changes will be lost.", "User Confirmation", JOptionPane.YES_NO_OPTION);

            if (choice == JOptionPane.YES_OPTION) {
                Authentication.ActiveAccess.CurrentOrder.DenyOrder();
                ClearDialog();
            }
        } else {
            int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want cancel this current order? All changes will be lost.", "User Confirmation", JOptionPane.YES_NO_OPTION);

            if (choice == JOptionPane.YES_OPTION) {
                ClearDialog();
            }
        }
    }//GEN-LAST:event_btnCancelOrderMouseClicked

    private void btnApproveOrderMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnApproveOrderMouseClicked
    {//GEN-HEADEREND:event_btnApproveOrderMouseClicked
        boolean createPurchaseOrder = false;
        List<StationaryStock> stockList = new ArrayList<>();
        try {
            switch (btnApproveOrder.getText()) {
                case "Request Order":
                    Authentication.ActiveAccess.CurrentOrder.setStaffStockID(lblStaffStockOrderID.getText());
                    Authentication.ActiveAccess.CurrentOrder.setOrderStock(Authentication.ActiveAccess.getCurrentOrderList());
                    Authentication.ActiveAccess.CurrentOrder.setCurrentDate(new Date());
                    Authentication.ActiveAccess.CurrentOrder.setStaffID(Authentication.AuthenticationSettings.getCurrentUserID());
                    Authentication.ActiveAccess.CurrentOrder.setOrderTotal(grandTotal);
                    Authentication.ActiveAccess.CurrentOrder.RequestCurrentOrder();  

                    Helper.DisplayError("Order request submitted successful!", "Request Submit successful");
                    ordered = true;
                    ClearDialog();
                    break;
                case "Approve Order": {
                    int choice = JOptionPane.showConfirmDialog(this, "You are about to approve this order, are you sure?", "User Confirmation", JOptionPane.YES_NO_OPTION);
                    if (choice == JOptionPane.YES_OPTION) {
                        for (StaffStockOrder staffStockOrder : Authentication.ActiveAccess.CurrentOrderList) {
                            StationaryStock stock = new StationaryStock().GetAllProductFromID(staffStockOrder.getStationaryStockID());
                            stock.setQuantity(stock.getQuantity() - staffStockOrder.getQuantity());

                            if (stock.getQuantity() < 0) {
                                createPurchaseOrder = true;
                                CreatePurchaseOrder(staffStockOrder);
                            } else {
                                stockList.add(stock);
                            }
                        }

                        if (!createPurchaseOrder) {
                            Authentication.ActiveAccess.CurrentOrder.ApproveOrder(stockList);
                            Helper.DisplayError("Order approval successfull!", "Request Submit successful");
                            ClearDialog();
                        } else {
                            Helper.DisplayError("Order approval unsucessfull, Stock order due to lack of items!", "Request Submit Unsucessfully");
                            ClearDialog();
                        }
                    }
                    break;
                }
                case "Generate Order Report":
                    new ApplicationHelper.ReportGenerator(Authentication.ActiveAccess.CurrentOrder);
                    Helper.DisplayError("Report Generated Successfully");
                    break;
                default: {
                    int choice = JOptionPane.showConfirmDialog(this, "You are about to request this order, are you sure?", "User Confirmation", JOptionPane.YES_NO_OPTION);
                    if (choice == JOptionPane.YES_OPTION) {
                        Authentication.ActiveAccess.CurrentOrder.setStaffStockID(lblStaffStockOrderID.getText());
                        Authentication.ActiveAccess.CurrentOrder.setOrderStock(Authentication.ActiveAccess.getCurrentOrderList());
                        Authentication.ActiveAccess.CurrentOrder.setCurrentDate(new Date());
                        Authentication.ActiveAccess.CurrentOrder.setStaffID(Authentication.AuthenticationSettings.getCurrentUserID());
                        Authentication.ActiveAccess.CurrentOrder.setOrderTotal(grandTotal);
                        Authentication.ActiveAccess.CurrentOrder.RequestCurrentOrder();

                        Helper.DisplayError("Order request submitted successful!", "Request Submit successful");
                        ClearDialog();
                    }
                    break;
                }
            }
        } catch (NullPointerException npe) {
            Helper.DisplayError("Error in Approval Request");
        }
    }//GEN-LAST:event_btnApproveOrderMouseClicked

    public void CreatePurchaseOrder(StaffStockOrder staffStockOrder) {
        PurchaseOrder po = new PurchaseOrder(SecurityModule.IDCreation.CreateOrderID(), staffStockOrder.getStationaryStockID(), new Date());
        po.InsertPurchaseOrder();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OrderDialog dialog = new OrderDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApproveOrder;
    private javax.swing.JButton btnBackFromOrder;
    private javax.swing.JButton btnCancelOrder;
    private javax.swing.JButton btnRemoveSelectedItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCreatedUser;
    private javax.swing.JLabel lblDateCompleted;
    private javax.swing.JLabel lblDateCreated;
    private javax.swing.JLabel lblGrandTotal;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblStaffStockOrderID;
    private javax.swing.JPanel pnlOrderDetails;
    private javax.swing.JPanel pnlOrderItems;
    private javax.swing.JTable tblOrderItems;
    // End of variables declaration//GEN-END:variables
}
